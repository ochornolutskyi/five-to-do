{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/superproger/workspace/five-to-do/src/components/TodosList/TodoItemContainer/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport EditingTitleRenderer from \"./TodoItemTitle/EditingTitleRenderer\";\nimport DefaultTitleRenderer from \"./TodoItemTitle/DefaultTitleRenderer\";\nimport { useDispatch } from \"react-redux\";\nimport { completeTask } from \"../../../redux/actions\";\n\nconst TodoItemContainer = ({\n  className,\n  title,\n  id,\n  completed\n}) => {\n  _s();\n\n  const taskTitleClassName = `${className}-title`;\n  const [isEditing, setIsEditing] = useState(false);\n  const dispatch = useDispatch();\n  const titleRenderer = !isEditing ? /*#__PURE__*/_jsxDEV(DefaultTitleRenderer, {\n    className: taskTitleClassName,\n    title: title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 7\n  }, this) : /*#__PURE__*/_jsxDEV(EditingTitleRenderer, {\n    className: `${taskTitleClassName} editing`,\n    title: title,\n    id: id,\n    setIsEditing: setIsEditing\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 7\n  }, this);\n  const isRenderButton = completed === false && !isEditing ? true : false;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: className,\n    children: [titleRenderer, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${className}-options`,\n      children: [isRenderButton && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `${className}-options__done`,\n        onClick: dispatch(completeTask(id))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 16\n      }, this), isRenderButton && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `${className}-options__edit`\n        /* onClick={() => {\n           setIsEditing(true);\n        }} */\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `${className}-options__remove` // onClick={() => removeTaskClickHandler(id)}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 7\n  }, this);\n};\n\n_s(TodoItemContainer, \"N3JrXWZ8fTbU7JE5K6HqlKvSyfQ=\", false, function () {\n  return [useDispatch];\n});\n\n_c = TodoItemContainer;\nexport default TodoItemContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoItemContainer\");","map":{"version":3,"sources":["/home/superproger/workspace/five-to-do/src/components/TodosList/TodoItemContainer/index.js"],"names":["React","useState","EditingTitleRenderer","DefaultTitleRenderer","useDispatch","completeTask","TodoItemContainer","className","title","id","completed","taskTitleClassName","isEditing","setIsEditing","dispatch","titleRenderer","isRenderButton"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,oBAAP,MAAiC,sCAAjC;AACA,OAAOC,oBAAP,MAAiC,sCAAjC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,YAAT,QAA6B,wBAA7B;;AAEA,MAAMC,iBAAiB,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,KAAb;AAAoBC,EAAAA,EAApB;AAAwBC,EAAAA;AAAxB,CAAD,KAAyC;AAAA;;AAChE,QAAMC,kBAAkB,GAAI,GAAEJ,SAAU,QAAxC;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAMa,QAAQ,GAAGV,WAAW,EAA5B;AAEA,QAAMW,aAAa,GAAG,CAACH,SAAD,gBACnB,QAAC,oBAAD;AAAsB,IAAA,SAAS,EAAED,kBAAjC;AAAqD,IAAA,KAAK,EAAEH;AAA5D;AAAA;AAAA;AAAA;AAAA,UADmB,gBAGnB,QAAC,oBAAD;AACG,IAAA,SAAS,EAAG,GAAEG,kBAAmB,UADpC;AAEG,IAAA,KAAK,EAAEH,KAFV;AAGG,IAAA,EAAE,EAAEC,EAHP;AAIG,IAAA,YAAY,EAAEI;AAJjB;AAAA;AAAA;AAAA;AAAA,UAHH;AAUA,QAAMG,cAAc,GAAGN,SAAS,KAAK,KAAd,IAAuB,CAACE,SAAxB,GAAoC,IAApC,GAA2C,KAAlE;AACA,sBACG;AAAK,IAAA,SAAS,EAAEL,SAAhB;AAAA,eACIQ,aADJ,eAEG;AAAK,MAAA,SAAS,EAAG,GAAER,SAAU,UAA7B;AAAA,iBACIS,cAAc,iBACZ;AACG,QAAA,SAAS,EAAG,GAAET,SAAU,gBAD3B;AAEG,QAAA,OAAO,EAAEO,QAAQ,CAACT,YAAY,CAACI,EAAD,CAAb;AAFpB;AAAA;AAAA;AAAA;AAAA,cAFN,EAOIO,cAAc,iBACZ;AACG,QAAA,SAAS,EAAG,GAAET,SAAU;AACxB;AAClB;AACA;;AAJe;AAAA;AAAA;AAAA;AAAA,cARN,eAeG;AACG,QAAA,SAAS,EAAG,GAAEA,SAAU,kBAD3B,CAEG;;AAFH;AAAA;AAAA;AAAA;AAAA,cAfH;AAAA;AAAA;AAAA;AAAA;AAAA,YAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADH;AAyBF,CA1CD;;GAAMD,iB;UAIcF,W;;;KAJdE,iB;AA4CN,eAAeA,iBAAf","sourcesContent":["import React, { useState } from \"react\";\nimport EditingTitleRenderer from \"./TodoItemTitle/EditingTitleRenderer\";\nimport DefaultTitleRenderer from \"./TodoItemTitle/DefaultTitleRenderer\";\nimport { useDispatch } from \"react-redux\";\nimport { completeTask } from \"../../../redux/actions\";\n\nconst TodoItemContainer = ({ className, title, id, completed }) => {\n   const taskTitleClassName = `${className}-title`;\n   const [isEditing, setIsEditing] = useState(false);\n\n   const dispatch = useDispatch();\n\n   const titleRenderer = !isEditing ? (\n      <DefaultTitleRenderer className={taskTitleClassName} title={title} />\n   ) : (\n      <EditingTitleRenderer\n         className={`${taskTitleClassName} editing`}\n         title={title}\n         id={id}\n         setIsEditing={setIsEditing}\n      />\n   );\n   const isRenderButton = completed === false && !isEditing ? true : false;\n   return (\n      <div className={className}>\n         {titleRenderer}\n         <div className={`${className}-options`}>\n            {isRenderButton && (\n               <button\n                  className={`${className}-options__done`}\n                  onClick={dispatch(completeTask(id))}\n               />\n            )}\n            {isRenderButton && (\n               <button\n                  className={`${className}-options__edit`}\n                  /* onClick={() => {\n                     setIsEditing(true);\n                  }} */\n               />\n            )}\n            <button\n               className={`${className}-options__remove`}\n               // onClick={() => removeTaskClickHandler(id)}\n            />\n         </div>\n      </div>\n   );\n};\n\nexport default TodoItemContainer;\n"]},"metadata":{},"sourceType":"module"}