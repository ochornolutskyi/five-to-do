{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/superproger/workspace/five-to-do/src/components/TodosList/TodoItemContainer/TodoItemTitle/EditingTitleRenderer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { changeTaskTitle } from \"../../../../redux/actions\";\nimport ErrorHint from \"../../../ErrorHint\";\nconst HINT_TEXT = \"The title can't be empty\";\n\nconst EditingTitleRenderer = ({\n  className,\n  id,\n  title,\n  setIsEditing\n}) => {\n  _s();\n\n  const [newTitle, setNewTitle] = useState(title);\n  const [isShowHint, setIsShowHint] = useState(false);\n  const dispatch = useDispatch();\n\n  const changeTitleHandler = value => {\n    setNewTitle(value);\n  };\n\n  const confirmNewTitle = (id, newTitle) => {\n    if (newTitle.trim() === title) {\n      setIsEditing(false);\n    } else if (!newTitle.trim().length) {\n      setIsShowHint(true);\n      setTimeout(() => setIsShowHint(false), 1500);\n    } else {\n      console.log(\"s\");\n      dispatch(changeTaskTitle(id, newTitle.trim()));\n      setIsEditing(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: className,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: event => changeTitleHandler(event.target.value),\n      value: newTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button-apply\",\n      onClick: () => confirmNewTitle(id, newTitle)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 10\n    }, this), isShowHint && /*#__PURE__*/_jsxDEV(ErrorHint, {\n      hintText: HINT_TEXT\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 7\n  }, this);\n};\n\n_s(EditingTitleRenderer, \"A4S62pj3RNJKJuCBM+/gwDeUsTo=\", false, function () {\n  return [useDispatch];\n});\n\n_c = EditingTitleRenderer;\nexport default EditingTitleRenderer;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditingTitleRenderer\");","map":{"version":3,"sources":["/home/superproger/workspace/five-to-do/src/components/TodosList/TodoItemContainer/TodoItemTitle/EditingTitleRenderer.js"],"names":["React","useState","useDispatch","changeTaskTitle","ErrorHint","HINT_TEXT","EditingTitleRenderer","className","id","title","setIsEditing","newTitle","setNewTitle","isShowHint","setIsShowHint","dispatch","changeTitleHandler","value","confirmNewTitle","trim","length","setTimeout","console","log","event","target"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,eAAT,QAAgC,2BAAhC;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AAEA,MAAMC,SAAS,GAAG,0BAAlB;;AAEA,MAAMC,oBAAoB,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,EAAb;AAAiBC,EAAAA,KAAjB;AAAwBC,EAAAA;AAAxB,CAAD,KAA4C;AAAA;;AACtE,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAACQ,KAAD,CAAxC;AACA,QAAM,CAACI,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAMc,QAAQ,GAAGb,WAAW,EAA5B;;AACA,QAAMc,kBAAkB,GAAIC,KAAD,IAAW;AACnCL,IAAAA,WAAW,CAACK,KAAD,CAAX;AACF,GAFD;;AAGA,QAAMC,eAAe,GAAG,CAACV,EAAD,EAAKG,QAAL,KAAkB;AACvC,QAAIA,QAAQ,CAACQ,IAAT,OAAoBV,KAAxB,EAA+B;AAC5BC,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACF,KAFD,MAEO,IAAI,CAACC,QAAQ,CAACQ,IAAT,GAAgBC,MAArB,EAA6B;AACjCN,MAAAA,aAAa,CAAC,IAAD,CAAb;AACAO,MAAAA,UAAU,CAAC,MAAMP,aAAa,CAAC,KAAD,CAApB,EAA6B,IAA7B,CAAV;AACF,KAHM,MAGA;AACJQ,MAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACAR,MAAAA,QAAQ,CAACZ,eAAe,CAACK,EAAD,EAAKG,QAAQ,CAACQ,IAAT,EAAL,CAAhB,CAAR;AACAT,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACF;AACH,GAXD;;AAYA,sBACG;AAAK,IAAA,SAAS,EAAEH,SAAhB;AAAA,4BACG;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,QAAQ,EAAGiB,KAAD,IAAWR,kBAAkB,CAACQ,KAAK,CAACC,MAAN,CAAaR,KAAd,CAA1D;AAAgF,MAAA,KAAK,EAAEN;AAAvF;AAAA;AAAA;AAAA;AAAA,YADH,eAEG;AAAQ,MAAA,SAAS,EAAC,cAAlB;AAAiC,MAAA,OAAO,EAAE,MAAMO,eAAe,CAACV,EAAD,EAAKG,QAAL;AAA/D;AAAA;AAAA;AAAA;AAAA,YAFH,EAGIE,UAAU,iBAAI,QAAC,SAAD;AAAW,MAAA,QAAQ,EAAER;AAArB;AAAA;AAAA;AAAA;AAAA,YAHlB;AAAA;AAAA;AAAA;AAAA;AAAA,UADH;AAOF,CA1BD;;GAAMC,oB;UAGcJ,W;;;KAHdI,oB;AA2BN,eAAeA,oBAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { changeTaskTitle } from \"../../../../redux/actions\";\nimport ErrorHint from \"../../../ErrorHint\";\n\nconst HINT_TEXT = \"The title can't be empty\";\n\nconst EditingTitleRenderer = ({ className, id, title, setIsEditing }) => {\n   const [newTitle, setNewTitle] = useState(title);\n   const [isShowHint, setIsShowHint] = useState(false);\n   const dispatch = useDispatch();\n   const changeTitleHandler = (value) => {\n      setNewTitle(value);\n   };\n   const confirmNewTitle = (id, newTitle) => {\n      if (newTitle.trim() === title) {\n         setIsEditing(false);\n      } else if (!newTitle.trim().length) {\n         setIsShowHint(true);\n         setTimeout(() => setIsShowHint(false), 1500);\n      } else {\n         console.log(\"s\");\n         dispatch(changeTaskTitle(id, newTitle.trim()));\n         setIsEditing(false);\n      }\n   };\n   return (\n      <div className={className}>\n         <input type=\"text\" onChange={(event) => changeTitleHandler(event.target.value)} value={newTitle} />\n         <button className=\"button-apply\" onClick={() => confirmNewTitle(id, newTitle)} />\n         {isShowHint && <ErrorHint hintText={HINT_TEXT} />}\n      </div>\n   );\n};\nexport default EditingTitleRenderer;\n"]},"metadata":{},"sourceType":"module"}