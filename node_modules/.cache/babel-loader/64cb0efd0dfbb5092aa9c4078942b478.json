{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/superproger/workspace/five-to-do-main/to-do/src/components/TodosList/TodoItemContainer/TodoItemTitle/ChangingTitleRenderer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport ErrorHint from \"../../../ErrorHint\";\nconst HINT_TEXT = \"The title can't be empty or be the same\";\n\nconst ChangingTitleRenderer = ({\n  id,\n  title,\n  changeTaskClickHandler,\n  setIsChanging\n}) => {\n  _s();\n\n  const [newTitle, setNewTitle] = useState(title);\n  const [isShowHint, setIsShowHint] = useState(false);\n\n  const changeTitleHandler = value => {\n    setNewTitle(value);\n  };\n\n  const confirmNewTitle = (id, newTitle) => {\n    if (!newTitle.trim().length || newTitle.trim() === title.trim()) {\n      setIsShowHint(true);\n      setTimeout(() => setIsShowHint(false), 1500);\n    } else {\n      setIsChanging(false);\n      changeTaskClickHandler(id, newTitle);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: event => changeTitleHandler(event.target.value),\n      value: newTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => confirmNewTitle(id, newTitle),\n      children: \"Confirm new title\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 10\n    }, this), isShowHint && /*#__PURE__*/_jsxDEV(ErrorHint, {\n      hintText: HINT_TEXT\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 7\n  }, this);\n};\n\n_s(ChangingTitleRenderer, \"HXsKAWonu6jfMHCzErhBgN79bms=\");\n\n_c = ChangingTitleRenderer;\nexport default ChangingTitleRenderer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChangingTitleRenderer\");","map":{"version":3,"sources":["/home/superproger/workspace/five-to-do-main/to-do/src/components/TodosList/TodoItemContainer/TodoItemTitle/ChangingTitleRenderer.js"],"names":["React","useState","ErrorHint","HINT_TEXT","ChangingTitleRenderer","id","title","changeTaskClickHandler","setIsChanging","newTitle","setNewTitle","isShowHint","setIsShowHint","changeTitleHandler","value","confirmNewTitle","trim","length","setTimeout","event","target"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AAEA,MAAMC,SAAS,GAAG,yCAAlB;;AAEA,MAAMC,qBAAqB,GAAG,CAAC;AAAEC,EAAAA,EAAF;AAAMC,EAAAA,KAAN;AAAaC,EAAAA,sBAAb;AAAqCC,EAAAA;AAArC,CAAD,KAA0D;AAAA;;AACrF,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAACK,KAAD,CAAxC;AACA,QAAM,CAACK,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAC,KAAD,CAA5C;;AACA,QAAMY,kBAAkB,GAAIC,KAAD,IAAW;AACnCJ,IAAAA,WAAW,CAACI,KAAD,CAAX;AACF,GAFD;;AAGA,QAAMC,eAAe,GAAG,CAACV,EAAD,EAAKI,QAAL,KAAkB;AACvC,QAAI,CAACA,QAAQ,CAACO,IAAT,GAAgBC,MAAjB,IAA2BR,QAAQ,CAACO,IAAT,OAAoBV,KAAK,CAACU,IAAN,EAAnD,EAAiE;AAC9DJ,MAAAA,aAAa,CAAC,IAAD,CAAb;AACAM,MAAAA,UAAU,CAAC,MAAMN,aAAa,CAAC,KAAD,CAApB,EAA6B,IAA7B,CAAV;AACF,KAHD,MAGO;AACJJ,MAAAA,aAAa,CAAC,KAAD,CAAb;AACAD,MAAAA,sBAAsB,CAACF,EAAD,EAAKI,QAAL,CAAtB;AACF;AACH,GARD;;AASA,sBACG;AAAA,4BACG;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,QAAQ,EAAGU,KAAD,IAAWN,kBAAkB,CAACM,KAAK,CAACC,MAAN,CAAaN,KAAd,CAA1D;AAAgF,MAAA,KAAK,EAAEL;AAAvF;AAAA;AAAA;AAAA;AAAA,YADH,eAEG;AAAQ,MAAA,OAAO,EAAE,MAAMM,eAAe,CAACV,EAAD,EAAKI,QAAL,CAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFH,EAGIE,UAAU,iBAAI,QAAC,SAAD;AAAW,MAAA,QAAQ,EAAER;AAArB;AAAA;AAAA;AAAA;AAAA,YAHlB;AAAA;AAAA;AAAA;AAAA;AAAA,UADH;AAOF,CAtBD;;GAAMC,qB;;KAAAA,qB;AAuBN,eAAeA,qBAAf","sourcesContent":["import React, { useState } from \"react\";\nimport ErrorHint from \"../../../ErrorHint\";\n\nconst HINT_TEXT = \"The title can't be empty or be the same\";\n\nconst ChangingTitleRenderer = ({ id, title, changeTaskClickHandler, setIsChanging }) => {\n   const [newTitle, setNewTitle] = useState(title);\n   const [isShowHint, setIsShowHint] = useState(false);\n   const changeTitleHandler = (value) => {\n      setNewTitle(value);\n   };\n   const confirmNewTitle = (id, newTitle) => {\n      if (!newTitle.trim().length || newTitle.trim() === title.trim()) {\n         setIsShowHint(true);\n         setTimeout(() => setIsShowHint(false), 1500);\n      } else {\n         setIsChanging(false);\n         changeTaskClickHandler(id, newTitle);\n      }\n   };\n   return (\n      <div>\n         <input type=\"text\" onChange={(event) => changeTitleHandler(event.target.value)} value={newTitle} />\n         <button onClick={() => confirmNewTitle(id, newTitle)}>Confirm new title</button>\n         {isShowHint && <ErrorHint hintText={HINT_TEXT} />}\n      </div>\n   );\n};\nexport default ChangingTitleRenderer;\n"]},"metadata":{},"sourceType":"module"}