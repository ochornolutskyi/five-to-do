{"ast":null,"code":"import { FETCH_TODOS_1, FETCH_TODOS_1_FAILED, FETCH_TODOS_1_SUCCESS, ADD_NEW_TASK, COMPLETE_TASK, REMOVE_TASK, CHANGE_TASK_TITLE } from \"../action_types\";\nconst initialState = {\n  isLoading: null,\n  tasks: [],\n  todoTasks: [],\n  completedTasks: []\n};\n\nconst filterTodoTask = tasks => tasks.filter(task => !task.completed);\n\nconst filterCompletedTask = tasks => tasks.filter(task => task.completed);\n\nconst findTaskById = (tasks, id) => tasks.find(task => task.id === id);\n\nconst todos_1_reducer = (state = initialState, action) => {\n  let newTasks, newTodoTasks, newCompletedTasks, currentTask;\n\n  switch (action.type) {\n    case FETCH_TODOS_1:\n      return { ...state,\n        isLoading: true\n      };\n\n    case FETCH_TODOS_1_SUCCESS:\n      newTasks = action.payload;\n      newTodoTasks = filterTodoTask(newTasks);\n      newCompletedTasks = filterCompletedTask(newTasks);\n      return { ...state,\n        isLoading: false,\n        tasks: newTasks,\n        todoTasks: newTodoTasks,\n        completedTasks: newCompletedTasks\n      };\n\n    case FETCH_TODOS_1_FAILED:\n      return { ...state,\n        isLoading: false,\n        tasks: null\n      };\n\n    case ADD_NEW_TASK:\n      newTasks = [...state.tasks];\n      newTasks.push(action.payload);\n      newTodoTasks = filterTodoTask(newTasks);\n      return { ...state,\n        tasks: newTasks,\n        todoTasks: newTodoTasks\n      };\n\n    case COMPLETE_TASK:\n      newTasks = [...state.tasks];\n      currentTask = findTaskById(newTasks, action.payload);\n      currentTask.completed = true;\n      newTasks = newTasks.filter(task => task.id !== currentTask.id);\n      newTasks.push(currentTask);\n      newTodoTasks = filterTodoTask(newTasks);\n      newCompletedTasks = filterCompletedTask(newTasks);\n      return { ...state,\n        tasks: newTasks,\n        todoTasks: newTodoTasks,\n        completedTasks: newCompletedTasks\n      };\n\n    case REMOVE_TASK:\n      newTasks = [...state.tasks];\n      newTasks = newTasks.filter(task => task.id !== action.payload);\n      newTodoTasks = filterTodoTask(newTasks);\n      newCompletedTasks = filterCompletedTask(newTasks);\n      return { ...state,\n        tasks: newTasks,\n        todoTasks: newTodoTasks,\n        completedTasks: newCompletedTasks\n      };\n\n    case CHANGE_TASK_TITLE:\n      newTasks = [...state.tasks];\n      currentTask = findTaskById(newTasks, action.payload.id);\n      currentTask.title = action.payload.title;\n\n    default:\n      return state;\n  }\n};\n\nexport default todos_1_reducer;","map":{"version":3,"sources":["/home/superproger/workspace/five-to-do/src/redux/reducers/todos_1_reducer.js"],"names":["FETCH_TODOS_1","FETCH_TODOS_1_FAILED","FETCH_TODOS_1_SUCCESS","ADD_NEW_TASK","COMPLETE_TASK","REMOVE_TASK","CHANGE_TASK_TITLE","initialState","isLoading","tasks","todoTasks","completedTasks","filterTodoTask","filter","task","completed","filterCompletedTask","findTaskById","id","find","todos_1_reducer","state","action","newTasks","newTodoTasks","newCompletedTasks","currentTask","type","payload","push","title"],"mappings":"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","sourcesContent":["import {\n   FETCH_TODOS_1,\n   FETCH_TODOS_1_FAILED,\n   FETCH_TODOS_1_SUCCESS,\n   ADD_NEW_TASK,\n   COMPLETE_TASK,\n   REMOVE_TASK,\n   CHANGE_TASK_TITLE,\n} from \"../action_types\";\n\nconst initialState = {\n   isLoading: null,\n   tasks: [],\n   todoTasks: [],\n   completedTasks: [],\n};\n\nconst filterTodoTask = (tasks) => tasks.filter((task) => !task.completed);\nconst filterCompletedTask = (tasks) => tasks.filter((task) => task.completed);\nconst findTaskById = (tasks, id) => tasks.find((task) => task.id === id);\n\nconst todos_1_reducer = (state = initialState, action) => {\n   let newTasks, newTodoTasks, newCompletedTasks, currentTask;\n   switch (action.type) {\n      case FETCH_TODOS_1:\n         return { ...state, isLoading: true };\n      case FETCH_TODOS_1_SUCCESS:\n         newTasks = action.payload;\n         newTodoTasks = filterTodoTask(newTasks);\n         newCompletedTasks = filterCompletedTask(newTasks);\n         return {\n            ...state,\n            isLoading: false,\n            tasks: newTasks,\n            todoTasks: newTodoTasks,\n            completedTasks: newCompletedTasks,\n         };\n      case FETCH_TODOS_1_FAILED:\n         return { ...state, isLoading: false, tasks: null };\n      case ADD_NEW_TASK:\n         newTasks = [...state.tasks];\n         newTasks.push(action.payload);\n         newTodoTasks = filterTodoTask(newTasks);\n         return {\n            ...state,\n            tasks: newTasks,\n            todoTasks: newTodoTasks,\n         };\n      case COMPLETE_TASK:\n         newTasks = [...state.tasks];\n         currentTask = findTaskById(newTasks, action.payload);\n         currentTask.completed = true;\n         newTasks = newTasks.filter((task) => task.id !== currentTask.id);\n         newTasks.push(currentTask);\n         newTodoTasks = filterTodoTask(newTasks);\n         newCompletedTasks = filterCompletedTask(newTasks);\n         return {\n            ...state,\n            tasks: newTasks,\n            todoTasks: newTodoTasks,\n            completedTasks: newCompletedTasks,\n         };\n      case REMOVE_TASK:\n         newTasks = [...state.tasks];\n         newTasks = newTasks.filter((task) => task.id !== action.payload);\n         newTodoTasks = filterTodoTask(newTasks);\n         newCompletedTasks = filterCompletedTask(newTasks);\n         return { ...state, tasks: newTasks, todoTasks: newTodoTasks, completedTasks: newCompletedTasks };\n      case CHANGE_TASK_TITLE:\n         newTasks = [...state.tasks];\n         currentTask = findTaskById(newTasks, action.payload.id);\n         currentTask.title = action.payload.title;\n\n      default:\n         return state;\n   }\n};\n\nexport default todos_1_reducer;\n"]},"metadata":{},"sourceType":"module"}