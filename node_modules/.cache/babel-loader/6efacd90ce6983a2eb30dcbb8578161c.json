{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/superproger/workspace/five-to-do/src/components/TodosList/TodoItemContainer/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport EditingTitleRenderer from \"./TodoItemTitle/EditingTitleRenderer\";\nimport DefaultTitleRenderer from \"./TodoItemTitle/DefaultTitleRenderer\";\n\nconst TodoItemContainer = ({\n  className,\n  id,\n  title,\n  completed\n}, ...props) => {\n  _s();\n\n  const todoTitleClasses = `${className}-title`;\n  const [isEditing, setIsEditing] = useState(false);\n  const titleRenderer = !isEditing ? /*#__PURE__*/_jsxDEV(DefaultTitleRenderer, {\n    className: todoTitleClasses,\n    title: title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 7\n  }, this) : /*#__PURE__*/_jsxDEV(EditingTitleRenderer, {\n    className: `${todoTitleClasses} editing`,\n    title: title,\n    id: id // changeTaskClickHandler={changeTaskClickHandler}\n    ,\n    setIsEditing: setIsEditing\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 7\n  }, this);\n  const isRenderButton = completed === false && !isEditing ? true : false;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: className,\n    children: [titleRenderer, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${className}-options`,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `${className}-options__remove` // onClick={() => removeTaskClickHandler(id)}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 7\n  }, this);\n};\n\n_s(TodoItemContainer, \"N4qUVpaen/rROL8jPu/4huFD8lA=\");\n\n_c = TodoItemContainer;\nexport default TodoItemContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoItemContainer\");","map":{"version":3,"sources":["/home/superproger/workspace/five-to-do/src/components/TodosList/TodoItemContainer/index.js"],"names":["React","useState","EditingTitleRenderer","DefaultTitleRenderer","TodoItemContainer","className","id","title","completed","props","todoTitleClasses","isEditing","setIsEditing","titleRenderer","isRenderButton"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,oBAAP,MAAiC,sCAAjC;AACA,OAAOC,oBAAP,MAAiC,sCAAjC;;AAEA,MAAMC,iBAAiB,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,EAAb;AAAiBC,EAAAA,KAAjB;AAAwBC,EAAAA;AAAxB,CAAD,EAAsC,GAAGC,KAAzC,KAAmD;AAAA;;AAC1E,QAAMC,gBAAgB,GAAI,GAAEL,SAAU,QAAtC;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAMY,aAAa,GAAG,CAACF,SAAD,gBACnB,QAAC,oBAAD;AAAsB,IAAA,SAAS,EAAED,gBAAjC;AAAmD,IAAA,KAAK,EAAEH;AAA1D;AAAA;AAAA;AAAA;AAAA,UADmB,gBAGnB,QAAC,oBAAD;AACG,IAAA,SAAS,EAAG,GAAEG,gBAAiB,UADlC;AAEG,IAAA,KAAK,EAAEH,KAFV;AAGG,IAAA,EAAE,EAAED,EAHP,CAIG;AAJH;AAKG,IAAA,YAAY,EAAEM;AALjB;AAAA;AAAA;AAAA;AAAA,UAHH;AAWA,QAAME,cAAc,GAAGN,SAAS,KAAK,KAAd,IAAuB,CAACG,SAAxB,GAAoC,IAApC,GAA2C,KAAlE;AACA,sBACG;AAAK,IAAA,SAAS,EAAEN,SAAhB;AAAA,eACIQ,aADJ,eAEG;AAAK,MAAA,SAAS,EAAG,GAAER,SAAU,UAA7B;AAAA,6BAYG;AACG,QAAA,SAAS,EAAG,GAAEA,SAAU,kBAD3B,CAEG;;AAFH;AAAA;AAAA;AAAA;AAAA;AAZH;AAAA;AAAA;AAAA;AAAA,YAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADH;AAsBF,CArCD;;GAAMD,iB;;KAAAA,iB;AAuCN,eAAeA,iBAAf","sourcesContent":["import React, { useState } from \"react\";\nimport EditingTitleRenderer from \"./TodoItemTitle/EditingTitleRenderer\";\nimport DefaultTitleRenderer from \"./TodoItemTitle/DefaultTitleRenderer\";\n\nconst TodoItemContainer = ({ className, id, title, completed }, ...props) => {\n   const todoTitleClasses = `${className}-title`;\n   const [isEditing, setIsEditing] = useState(false);\n   const titleRenderer = !isEditing ? (\n      <DefaultTitleRenderer className={todoTitleClasses} title={title} />\n   ) : (\n      <EditingTitleRenderer\n         className={`${todoTitleClasses} editing`}\n         title={title}\n         id={id}\n         // changeTaskClickHandler={changeTaskClickHandler}\n         setIsEditing={setIsEditing}\n      />\n   );\n   const isRenderButton = completed === false && !isEditing ? true : false;\n   return (\n      <div className={className}>\n         {titleRenderer}\n         <div className={`${className}-options`}>\n            {/*  {isRenderButton && (\n               <button className={`${className}-options__done`} onClick={() => completeTaskClickHandler(id)} />\n            )}\n            {isRenderButton && (\n               <button\n                  className={`${className}-options__edit`}\n                  onClick={() => {\n                     setIsEditing(true);\n                  }}\n               />\n            )} */}\n            <button\n               className={`${className}-options__remove`}\n               // onClick={() => removeTaskClickHandler(id)}\n            />\n         </div>\n      </div>\n   );\n};\n\nexport default TodoItemContainer;\n"]},"metadata":{},"sourceType":"module"}