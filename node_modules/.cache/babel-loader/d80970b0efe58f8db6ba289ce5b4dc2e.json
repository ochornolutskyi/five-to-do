{"ast":null,"code":"import { FETCH_TODOS_1, FETCH_TODOS_1_FAILED, FETCH_TODOS_1_SUCCESS, ADD_NEW_TASK, COMPLETE_TASK } from \"../action_types\";\nconst initialState = {\n  isLoading: null,\n  tasks: [],\n  todoTasks: [],\n  completedTasks: []\n};\n\nconst filterTodoTask = tasks => tasks.filter(task => !task.completed);\n\nconst filterCompletedTask = tasks => tasks.filter(task => task.completed);\n\nconst todos_1_reducer = (state = initialState, action) => {\n  let newTasks, newTodoTasks, newCompletedTasks;\n\n  switch (action.type) {\n    case FETCH_TODOS_1:\n      return { ...state,\n        isLoading: true\n      };\n\n    case FETCH_TODOS_1_SUCCESS:\n      newTasks = action.payload;\n      newTodoTasks = filterTodoTask(newTasks);\n      newCompletedTasks = filterCompletedTask(newTasks);\n      return { ...state,\n        isLoading: false,\n        tasks: newTasks,\n        todoTasks: newTodoTasks,\n        completedTasks: newCompletedTasks\n      };\n\n    case FETCH_TODOS_1_FAILED:\n      return { ...state,\n        isLoading: false,\n        tasks: null\n      };\n\n    case ADD_NEW_TASK:\n      newTasks = [...state.tasks];\n      newTasks.push(action.payload);\n      newTodoTasks = filterTodoTask(newTasks);\n      return { ...state,\n        tasks: newTasks,\n        todoTasks: newTodoTasks\n      };\n\n    case COMPLETE_TASK:\n      newTasks = [...state.tasks];\n      newTasks.find(task => task.id === action.payload).completed = true;\n      newTodoTasks = filterTodoTask(newTasks);\n      newCompletedTasks = filterCompletedTask(newTasks);\n      return { ...state,\n        tasks: newTasks,\n        todoTasks: newTodoTasks,\n        completedTasks: newCompletedTasks\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default todos_1_reducer;","map":{"version":3,"sources":["/home/superproger/workspace/five-to-do/src/redux/reducers/todos_1_reducer.js"],"names":["FETCH_TODOS_1","FETCH_TODOS_1_FAILED","FETCH_TODOS_1_SUCCESS","ADD_NEW_TASK","COMPLETE_TASK","initialState","isLoading","tasks","todoTasks","completedTasks","filterTodoTask","filter","task","completed","filterCompletedTask","todos_1_reducer","state","action","newTasks","newTodoTasks","newCompletedTasks","type","payload","push","find","id"],"mappings":"AAAA,SACGA,aADH,EAEGC,oBAFH,EAGGC,qBAHH,EAIGC,YAJH,EAKGC,aALH,QAMO,iBANP;AAQA,MAAMC,YAAY,GAAG;AAClBC,EAAAA,SAAS,EAAE,IADO;AAElBC,EAAAA,KAAK,EAAE,EAFW;AAGlBC,EAAAA,SAAS,EAAE,EAHO;AAIlBC,EAAAA,cAAc,EAAE;AAJE,CAArB;;AAOA,MAAMC,cAAc,GAAIH,KAAD,IAAWA,KAAK,CAACI,MAAN,CAAcC,IAAD,IAAU,CAACA,IAAI,CAACC,SAA7B,CAAlC;;AACA,MAAMC,mBAAmB,GAAIP,KAAD,IAAWA,KAAK,CAACI,MAAN,CAAcC,IAAD,IAAUA,IAAI,CAACC,SAA5B,CAAvC;;AAEA,MAAME,eAAe,GAAG,CAACC,KAAK,GAAGX,YAAT,EAAuBY,MAAvB,KAAkC;AACvD,MAAIC,QAAJ,EAAcC,YAAd,EAA4BC,iBAA5B;;AACA,UAAQH,MAAM,CAACI,IAAf;AACG,SAAKrB,aAAL;AACG,aAAO,EAAE,GAAGgB,KAAL;AAAYV,QAAAA,SAAS,EAAE;AAAvB,OAAP;;AACH,SAAKJ,qBAAL;AACGgB,MAAAA,QAAQ,GAAGD,MAAM,CAACK,OAAlB;AACAH,MAAAA,YAAY,GAAGT,cAAc,CAACQ,QAAD,CAA7B;AACAE,MAAAA,iBAAiB,GAAGN,mBAAmB,CAACI,QAAD,CAAvC;AACA,aAAO,EACJ,GAAGF,KADC;AAEJV,QAAAA,SAAS,EAAE,KAFP;AAGJC,QAAAA,KAAK,EAAEW,QAHH;AAIJV,QAAAA,SAAS,EAAEW,YAJP;AAKJV,QAAAA,cAAc,EAAEW;AALZ,OAAP;;AAOH,SAAKnB,oBAAL;AACG,aAAO,EAAE,GAAGe,KAAL;AAAYV,QAAAA,SAAS,EAAE,KAAvB;AAA8BC,QAAAA,KAAK,EAAE;AAArC,OAAP;;AACH,SAAKJ,YAAL;AACGe,MAAAA,QAAQ,GAAG,CAAC,GAAGF,KAAK,CAACT,KAAV,CAAX;AACAW,MAAAA,QAAQ,CAACK,IAAT,CAAcN,MAAM,CAACK,OAArB;AACAH,MAAAA,YAAY,GAAGT,cAAc,CAACQ,QAAD,CAA7B;AACA,aAAO,EACJ,GAAGF,KADC;AAEJT,QAAAA,KAAK,EAAEW,QAFH;AAGJV,QAAAA,SAAS,EAAEW;AAHP,OAAP;;AAKH,SAAKf,aAAL;AACGc,MAAAA,QAAQ,GAAG,CAAC,GAAGF,KAAK,CAACT,KAAV,CAAX;AACAW,MAAAA,QAAQ,CAACM,IAAT,CAAeZ,IAAD,IAAUA,IAAI,CAACa,EAAL,KAAYR,MAAM,CAACK,OAA3C,EAAoDT,SAApD,GAAgE,IAAhE;AACAM,MAAAA,YAAY,GAAGT,cAAc,CAACQ,QAAD,CAA7B;AACAE,MAAAA,iBAAiB,GAAGN,mBAAmB,CAACI,QAAD,CAAvC;AACA,aAAO,EACJ,GAAGF,KADC;AAEJT,QAAAA,KAAK,EAAEW,QAFH;AAGJV,QAAAA,SAAS,EAAEW,YAHP;AAIJV,QAAAA,cAAc,EAAEW;AAJZ,OAAP;;AAMH;AACG,aAAOJ,KAAP;AArCN;AAuCF,CAzCD;;AA2CA,eAAeD,eAAf","sourcesContent":["import {\n   FETCH_TODOS_1,\n   FETCH_TODOS_1_FAILED,\n   FETCH_TODOS_1_SUCCESS,\n   ADD_NEW_TASK,\n   COMPLETE_TASK,\n} from \"../action_types\";\n\nconst initialState = {\n   isLoading: null,\n   tasks: [],\n   todoTasks: [],\n   completedTasks: [],\n};\n\nconst filterTodoTask = (tasks) => tasks.filter((task) => !task.completed);\nconst filterCompletedTask = (tasks) => tasks.filter((task) => task.completed);\n\nconst todos_1_reducer = (state = initialState, action) => {\n   let newTasks, newTodoTasks, newCompletedTasks;\n   switch (action.type) {\n      case FETCH_TODOS_1:\n         return { ...state, isLoading: true };\n      case FETCH_TODOS_1_SUCCESS:\n         newTasks = action.payload;\n         newTodoTasks = filterTodoTask(newTasks);\n         newCompletedTasks = filterCompletedTask(newTasks);\n         return {\n            ...state,\n            isLoading: false,\n            tasks: newTasks,\n            todoTasks: newTodoTasks,\n            completedTasks: newCompletedTasks,\n         };\n      case FETCH_TODOS_1_FAILED:\n         return { ...state, isLoading: false, tasks: null };\n      case ADD_NEW_TASK:\n         newTasks = [...state.tasks];\n         newTasks.push(action.payload);\n         newTodoTasks = filterTodoTask(newTasks);\n         return {\n            ...state,\n            tasks: newTasks,\n            todoTasks: newTodoTasks,\n         };\n      case COMPLETE_TASK:\n         newTasks = [...state.tasks];\n         newTasks.find((task) => task.id === action.payload).completed = true;\n         newTodoTasks = filterTodoTask(newTasks);\n         newCompletedTasks = filterCompletedTask(newTasks);\n         return {\n            ...state,\n            tasks: newTasks,\n            todoTasks: newTodoTasks,\n            completedTasks: newCompletedTasks,\n         };\n      default:\n         return state;\n   }\n};\n\nexport default todos_1_reducer;\n"]},"metadata":{},"sourceType":"module"}